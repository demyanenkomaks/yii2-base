#!/usr/bin/env php
<?php
/**
 * Yii Application Initialization Tool
 *
 * In order to run in non-interactive mode:
 *
 * init --APP_ACTION=install --APP_ENV=Development --BACKEND_URI=backend --DB_CONNECTION=mysql --DB_HOST=localhost --DB_DATABASE=database --DB_USERNAME=login --DB_PASSWORD=password
 *
 * APP_ACTION - required parameter, has value install or update
 */
if (!extension_loaded('openssl')) {
    die('The OpenSSL PHP extension is required by Yii2.');
}

require __DIR__ . './vendor/autoload.php';

if (file_exists(__DIR__ . '/.env')) {
    $dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
    $dotenv->load();
}

$params = getParams();
foreach ($params as $key => $param) {
    $_ENV[$key] = $param;
}

$checkVariables = [];
//if (isset($_ENV['APP_ACTION']) && $_ENV['APP_ACTION'] === 'install') {
//    $checkVariables = [
//        'APP_ENV',
//        'BACKEND_URI',
//        'DB_CONNECTION',
//        'DB_HOST',
//        'DB_DATABASE',
//        'DB_USERNAME',
//        'DB_PASSWORD',
//    ];
//} elseif (isset($_ENV['APP_ACTION']) && $_ENV['APP_ACTION'] === 'update') {
//
//} else {
//    echo "\nNot enough settings: APP_ACTION";
//    exit(0);
//}


$existVariables = [];
foreach ($checkVariables as $variable) {
    if (!isset($_ENV[$variable])) {
        $existVariables[] = $variable;
    }
}
if ($existVariables !== []) {
    $str = implode(', ', $existVariables);
    echo "Not enough settings: $str";
    exit(0);
}

if ($_ENV['APP_ACTION'] === 'install') {

    $root = str_replace('\\', '/', __DIR__);
    $envs = require "$root/environments/index.php";

    echo "\n\nYii Application Initialization Tool v1.1\n\n";

    $envName = null;
    if (isset($envs[$_ENV['APP_ENV']])) {
        $env = $envs[$_ENV['APP_ENV']];
    } else {
        $envNames = array_keys($envs);
        $str = implode(', ', $envNames);
        echo "\n  Quit initialization. ENV should matter: $str\n";
        exit(0);
    }

    echo "\n\n  Start initialization ...\n\n";

    $files = getFileList("$root/environments/{$env['path']}");
    if (isset($env['skipFiles'])) {
        $skipFiles = $env['skipFiles'];
        array_walk($skipFiles, function (&$value) use ($env, $root) {
            $value = "$root/$value";
        });
        $files = array_diff($files, array_intersect_key($env['skipFiles'], array_filter($skipFiles, 'file_exists')));
    }

    $all = true;
    foreach ($files as $file) {
        if (!copyFile($root, "environments/{$env['path']}/$file", $file, $all, $params)) {
            break;
        }
    }
    copyAll("$root/web", "$root/../web");

    $callbacks = ['setCookieValidationKey', 'setWritable', 'setExecutable', 'createSymlink', 'setDBConnection'];
    foreach ($callbacks as $callback) {
        if (!empty($env[$callback])) {
            $callback($root, $env[$callback]);
        }
    }

    echo "\n  ... initialization completed.\n\n";

} elseif ($_ENV['APP_ACTION'] === 'update') {

}


function copyAll($from, $to, $rewrite = true)
{
    if (is_dir($from)) {
        if (!is_dir($to) && !mkdir($to) && !is_dir($to)) {
            throw new \RuntimeException(sprintf('Directory "%s" was not created', $to));
        }
        $d = dir($from);
        while (false !== ($entry = $d->read())) {
            if ($entry === '.' || $entry === '..') continue;
            copyAll("$from/$entry", "$to/$entry", $rewrite);
        }
        $d->close();
        rmdir($from);
    } else {
        if (!file_exists($to) || $rewrite) {
            copy($from, $to);
            unlink($from);
        }
    }
}

function getFileList($root, $basePath = '')
{
    $files = [];
    $handle = opendir($root);
    while (($path = readdir($handle)) !== false) {
        if ($path === '.git' || $path === '.svn' || $path === '.' || $path === '..') {
            continue;
        }
        $fullPath = "$root/$path";
        $relativePath = $basePath === '' ? $path : "$basePath/$path";
        if (is_dir($fullPath)) {
            $files = array_merge($files, getFileList($fullPath, $relativePath));
        } else {
            $files[] = $relativePath;
        }
    }
    closedir($handle);
    return $files;
}

function copyFile($root, $source, $target, &$all, $params)
{
    if (!is_file($root . '/' . $source)) {
        echo "       skip $target ($source not exist)\n";
        return true;
    }
    if (is_file($root . '/' . $target)) {
        if (file_get_contents($root . '/' . $source) === file_get_contents($root . '/' . $target)) {
            echo "  unchanged $target\n";
            return true;
        }
        if ($all) {
            echo "  overwrite $target\n";
        } else {
            echo "      exist $target\n";
            echo "            ...overwrite? [Yes|No|All|Quit] ";


            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));
            if (!strncasecmp($answer, 'q', 1)) {
                return false;
            } else {
                if (!strncasecmp($answer, 'y', 1)) {
                    echo "  overwrite $target\n";
                } else {
                    if (!strncasecmp($answer, 'a', 1)) {
                        echo "  overwrite $target\n";
                        $all = true;
                    } else {
                        echo "       skip $target\n";
                        return true;
                    }
                }
            }
        }
        file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
        return true;
    }
    echo "   generate $target\n";
    @mkdir(dirname($root . '/' . $target), 0777, true);
    file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
    return true;
}

function dd($delfile)
{
    if (file_exists($delfile)) {
        chmod($delfile, 0777);
        if (is_dir($delfile)) {
            $handle = opendir($delfile);
            while ($filename = readdir($handle))
                if ($filename !== '.' && $filename !== '..' && !is_link("$delfile/$filename")) {
                    dd("$delfile/$filename");
                }
            closedir($handle);
            rmdir($delfile);
        } else {
            unlink($delfile);
        }
    }
}

function getParams()
{
    $rawParams = [];
    if (isset($_SERVER['argv'])) {
        $rawParams = $_SERVER['argv'];
        array_shift($rawParams);
    }

    $params = [];
    foreach ($rawParams as $param) {
        if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
            $name = $matches[1];
            $params[$name] = isset($matches[3]) ? $matches[3] : true;
        } else {
            $params[] = $param;
        }
    }
    return $params;
}

function setDBConnection($root, $paths)
{
    foreach ($paths as $path) {
        $file = $root . '/' . $path;
        echo "\nSet database connection parameters to $file \n\n";
        $content = file_get_contents($file);
        $content = preg_replace('/%DB_CONNECTION%/', $_ENV['DB_CONNECTION'], $content);
        $content = preg_replace('/%DB_HOST%/', $_ENV['DB_HOST'], $content);
        $content = preg_replace('/%DB_DATABASE%/', $_ENV['DB_DATABASE'], $content);
        $content = preg_replace('/%DB_USERNAME%/', $_ENV['DB_USERNAME'], $content);
        $content = preg_replace('/%DB_PASSWORD%/', $_ENV['DB_PASSWORD'], $content);
        file_put_contents($file, $content);
    }
}

function setWritable($root, $paths)
{
    foreach ($paths as $writable) {
        if (is_dir("{$root}/{$writable}")) {
            if (@chmod("{$root}/{$writable}", 0777)) {
                echo "      chmod 0777 {$writable}\n";
            } else {
                printError("Operation chmod not permitted for directory {$writable}.");
            }
        } else {
            printError("Directory {$root}/{$writable} does not exist.");
        }
    }
}

function setExecutable($root, $paths)
{
    foreach ($paths as $executable) {
        if (file_exists("$root/$executable")) {
            if (@chmod("$root/$executable", 0755)) {
                echo "      chmod 0755 $executable\n";
            } else {
                printError("Operation chmod not permitted for $executable.");
            }
        } else {
            printError("$executable does not exist.");
        }
    }
}

function setCookieValidationKey($root, $paths)
{
    foreach ($paths as $file) {
        echo "   generate cookie validation key in $file\n";
        $file = $root . '/' . $file;
        $length = 32;
        $bytes = openssl_random_pseudo_bytes($length);
        $key = strtr(substr(base64_encode($bytes), 0, $length), '+/=', '_-.');
        $content = preg_replace('/(("|\')cookieValidationKey("|\')\s*=>\s*)(""|\'\')/', "\\1'$key'", file_get_contents($file));
        file_put_contents($file, $content);
    }
}

function createSymlink($root, $links)
{
    foreach ($links as $link => $target) {
        //first removing folders to avoid errors if the folder already exists
        @rmdir($root . "/" . $link);
        //next removing existing symlink in order to update the target
        if (is_link($root . "/" . $link)) {
            @unlink($root . "/" . $link);
        }
        if (@symlink($root . "/" . $target, $root . "/" . $link)) {
            echo "      symlink $root/$target $root/$link\n";
        } else {
            printError("Cannot create symlink $root/$target $root/$link.");
        }
    }

    @rmdir("$root/../web/{$_ENV['BACKEND_URI']}");
//next removing existing symlink in order to update the target
    if (is_link("$root/../web/{$_ENV['BACKEND_URI']}")) {
        @unlink("$root/../web/{$_ENV['BACKEND_URI']}");
    }
    if (@symlink("$root/backend/web", "$root/../web/{$_ENV['BACKEND_URI']}")) {
        echo "      symlink $root/backend/web, $root/web/{$_ENV['BACKEND_URI']}\n";
    } else {
        printError("Cannot create symlink $root/web/{$_ENV['BACKEND_URI']}.");
    }
}

/**
 * Prints error message.
 * @param string $message message
 */
function printError($message)
{
    echo "\n  " . formatMessage("Error. $message", ['fg-red']) . " \n";
}

/**
 * Returns true if the stream supports colorization. ANSI colors are disabled if not supported by the stream.
 *
 * - windows without ansicon
 * - not tty consoles
 *
 * @return boolean true if the stream supports ANSI colors, otherwise false.
 */
function ansiColorsSupported()
{
    return DIRECTORY_SEPARATOR === '\\'
        ? getenv('ANSICON') !== false || getenv('ConEmuANSI') === 'ON'
        : function_exists('posix_isatty') && @posix_isatty(STDOUT);
}

/**
 * Get ANSI code of style.
 * @param string $name style name
 * @return integer ANSI code of style.
 */
function getStyleCode($name)
{
    $styles = [
        'bold' => 1,
        'fg-black' => 30,
        'fg-red' => 31,
        'fg-green' => 32,
        'fg-yellow' => 33,
        'fg-blue' => 34,
        'fg-magenta' => 35,
        'fg-cyan' => 36,
        'fg-white' => 37,
        'bg-black' => 40,
        'bg-red' => 41,
        'bg-green' => 42,
        'bg-yellow' => 43,
        'bg-blue' => 44,
        'bg-magenta' => 45,
        'bg-cyan' => 46,
        'bg-white' => 47,
    ];
    return $styles[$name];
}

/**
 * Formats message using styles if STDOUT supports it.
 * @param string $message message
 * @param string[] $styles styles
 * @return string formatted message.
 */
function formatMessage($message, $styles)
{
    if (empty($styles) || !ansiColorsSupported()) {
        return $message;
    }

    return sprintf("\x1b[%sm", implode(';', array_map('getStyleCode', $styles))) . $message . "\x1b[0m";
}
